# .github/workflows/main.yml

name: Scrape Tennis Data & Update Page

on:
  schedule:
    # Runs daily at a specific UTC time (adjust as needed)
    # Example: Run at 06:00 UTC daily
    - cron: '0 6 * * *'
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to commit changes back to the repo
      pages: write # Required to deploy to GitHub Pages
      id-token: write # Required for GitHub Pages deployment

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
           persist-credentials: false # Fetch without credentials initially

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Google Chrome & Dependencies
        run: |
          echo "Installing system dependencies..."
          sudo apt-get update
          sudo apt-get install -y wget gpg software-properties-common
          echo "Installing Google Chrome..."
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor | sudo tee /usr/share/keyrings/google-chrome-keyring.gpg > /dev/null
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          google-chrome --version
          echo "Installing Python dependencies..."
          python -m pip install --upgrade pip
          # Removed beautifulsoup4, requests - Selenium/stdlib handle scraping now
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          echo "Dependency installation complete."


      - name: Run Sackmann Data Pipeline (Matchups & Results) # Updated Name
        id: sackmann_pipeline # Updated ID
        # This script now saves both sackmann_matchups_*.csv and match_results_*.csv
        run: python save_sackmann_data.py

      - name: Run Betcenter Odds Scraper
        id: betcenter_scrape
        continue-on-error: true
        run: python betcenter_odds_scraper.py # Produces betcenter_odds_*.csv

      - name: Process and Merge Data
        id: process_data
        run: python process_data.py # Produces processed_comparison_*.csv

      # Results scraper step removed as it's integrated into sackmann pipeline

      - name: Simulate Betting Strategies # Identifies bets based on processed data
        id: simulate_bets
        run: python simulate_strategies.py # Appends to strategy_log.csv
        continue-on-error: true

      - name: Calculate Strategy Performance # Calculates P/L using logs and results
        id: calculate_perf
        # This now reads match_results_*.csv generated by save_sackmann_data.py
        run: python calculate_results.py # Updates strategy_log.csv, creates summary
        continue-on-error: true

      - name: Generate HTML Page # Reads processed_comparison & results summary later
        id: generate_html
        run: python generate_page.py

      # --- Commit Files ---
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Stage Generated Files # Updated Step Logic
        run: |
          echo "Staging index.html and generated CSV files if they exist..."
          # Always add index.html (should always be generated)
          git add index.html

          # Conditionally add CSV files only if they exist
          if ls data_archive/sackmann_matchups_*.csv 1> /dev/null 2>&1; then
            echo "Adding Sackmann CSV(s)..."
            git add data_archive/sackmann_matchups_*.csv
          else
            echo "Sackmann CSV not found, skipping add."
          fi

          if ls data_archive/betcenter_odds_*.csv 1> /dev/null 2>&1; then
            echo "Adding Betcenter CSV(s)..."
            git add data_archive/betcenter_odds_*.csv
          else
            echo "Betcenter CSV not found, skipping add."
          fi

          if ls data_archive/processed_comparison_*.csv 1> /dev/null 2>&1; then
            echo "Adding Processed Comparison CSV(s)..."
            git add data_archive/processed_comparison_*.csv
          else
            echo "Processed Comparison CSV not found, skipping add."
          fi

          if ls data_archive/match_results_*.csv 1> /dev/null 2>&1; then
            echo "Adding Match Results CSV(s)..."
            git add data_archive/match_results_*.csv
          else
            echo "Match Results CSV not found, skipping add."
          fi

          if ls data_archive/strategy_log.csv 1> /dev/null 2>&1; then
            echo "Adding Strategy Log CSV..."
            git add data_archive/strategy_log.csv
          else
            echo "Strategy Log CSV not found, skipping add."
          fi

          if ls data_archive/daily_results_summary.csv 1> /dev/null 2>&1; then
            echo "Adding Daily Summary CSV..."
            git add data_archive/daily_results_summary.csv
          else
            echo "Daily Summary CSV not found, skipping add."
          fi

          echo "Staging check complete."
          git status # Show what is actually staged

      - name: Commit Updates
        run: |
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            echo "Committing updated data, results, logs, and page..."
            # Commit message reflects the broader scope now
            git commit -m "Automated data processing, results, strategy simulation, and page update"
          fi

      # --- Push Changes ---
      - name: Push Changes
        run: |
          git fetch origin ${{ github.ref }}
          if [[ $(git rev-list --count @{u}..HEAD) -gt 0 ]]; then
             echo "Local branch is ahead, attempting to push changes..."
             # Push using the GITHUB_TOKEN
             git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}
          else
             echo "No local commits to push."
          fi
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --- GitHub Pages Deployment ---
      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload Artifact for Pages Deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.' # Uploads the entire directory

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

